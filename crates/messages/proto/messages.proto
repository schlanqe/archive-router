syntax = "proto3";
package messages;
import "google/protobuf/empty.proto";

message Envelope {
  oneof msg {
    // router <-> worker
    Ping ping = 1;
    Pong pong = 2;

    // client <-> worker
    Query query = 5;
    QueryResult query_result = 6;
    RangeSet dataset_state = 7;

    // client metrics
    QuerySubmitted query_submitted = 8;
    QueryFinished query_finished = 9;

    // collector <-> worker
    QueryLogs query_logs = 10;
    LogsCollected logs_collected = 11;
  }
}

message Range {
  uint32 begin = 1;
  uint32 end = 2;
}

message RangeSet {
  repeated Range ranges = 1;
}

message WorkerState {
  map<string, RangeSet> datasets = 1;
}

message Ping {
  string worker_id = 1;
  string worker_url = 2;
  WorkerState state = 3;
  bool pause = 4;
  uint64 stored_bytes = 5;
  string version = 6;
  bytes signature = 7;
}

message Pong {
  bytes ping_hash = 1;
  oneof status {
    google.protobuf.Empty not_registered = 2;
    google.protobuf.Empty unsupported_version = 3;
    google.protobuf.Empty jailed = 4;
    WorkerState active = 5;
  }
}

message Query {
  string query_id = 1;
  string dataset = 2;
  string query = 3;
  bool profiling = 4;
  string client_state_json = 5;
  bytes signature = 6;
}

message QueryResult {
  string query_id = 1;
  oneof result {
    OkResult ok = 2;
    string bad_request = 3;
    string server_error = 4;
  }
}

message OkResult {
  bytes data = 1;
  optional bytes exec_plan = 2;
}

message QuerySubmitted {
  string client_id = 1;
  string worker_id = 2;
  string query_id = 3;

  string dataset = 4;
  string query = 5;
  bytes query_hash = 6;
}

message QueryFinished {
  string client_id = 1;
  string worker_id = 2;
  string query_id = 3;

  uint32 exec_time_ms = 4;
  oneof result {
    SizeAndHash ok = 5;
    string bad_request = 6;
    string server_error = 7;
    google.protobuf.Empty timeout = 8;
  }
}

message QueryExecuted {
  string client_id = 1;
  string worker_id = 2;

  Query query = 3;
  bytes query_hash = 5;

  uint32 exec_time_ms = 6;
  oneof result {
    InputAndOutput ok = 7;
    string bad_request = 8;
    string server_error = 9;
  }
  uint64 seq_no = 10;
  uint64 timestamp_ms = 11;
  bytes signature = 12;
}

message QueryLogs {
  repeated QueryExecuted queries_executed = 1;
}

message InputAndOutput {
  uint32 num_read_chunks = 1;
  SizeAndHash output = 2;
}

message SizeAndHash {
  uint32 size = 1;
  bytes sha3_256 = 2;
}

message LogsCollected {
  map<string, uint64> sequence_numbers = 1; // peer ID -> last saved seq no
}
